// <auto-generated />
using ClassroomManager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace ClassroomManager.Migrations
{
    [DbContext(typeof(CMContext))]
    [Migration("20180126120531_AddAttendencesTable")]
    partial class AddAttendencesTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("ClassroomManager.Models.Absence", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Reason");

                    b.HasKey("ID");

                    b.ToTable("Absences");
                });

            modelBuilder.Entity("ClassroomManager.Models.Attendance", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("courseID");

                    b.Property<int>("lessonID");

                    b.Property<bool>("present");

                    b.Property<int>("reasonID");

                    b.Property<int>("studentID");

                    b.HasKey("ID");

                    b.HasIndex("courseID");

                    b.HasIndex("lessonID");

                    b.HasIndex("reasonID");

                    b.HasIndex("studentID");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("ClassroomManager.Models.Course", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("courseUniId");

                    b.Property<string>("level");

                    b.Property<int>("numberOfLessons");

                    b.Property<string>("title");

                    b.HasKey("ID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("ClassroomManager.Models.Lesson", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CourseID");

                    b.Property<DateTime>("endTime");

                    b.Property<int>("index");

                    b.Property<bool>("isMandatory");

                    b.Property<string>("location");

                    b.Property<DateTime>("startTime");

                    b.Property<string>("topic");

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("ClassroomManager.Models.Student", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<bool>("adjustments");

                    b.Property<string>("firstName");

                    b.Property<string>("gender");

                    b.Property<string>("imageURL");

                    b.Property<string>("lastName");

                    b.Property<string>("matricNumber");

                    b.Property<string>("origin");

                    b.Property<int>("yearOfStudy");

                    b.HasKey("ID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("ClassroomManager.Models.StudentCourse", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("courseID");

                    b.Property<int>("studentID");

                    b.HasKey("ID");

                    b.HasIndex("courseID");

                    b.HasIndex("studentID");

                    b.ToTable("StudentCourses");
                });

            modelBuilder.Entity("ClassroomManager.Models.Attendance", b =>
                {
                    b.HasOne("ClassroomManager.Models.Course", "course")
                        .WithMany()
                        .HasForeignKey("courseID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ClassroomManager.Models.Lesson", "lesson")
                        .WithMany()
                        .HasForeignKey("lessonID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ClassroomManager.Models.Absence", "reason")
                        .WithMany()
                        .HasForeignKey("reasonID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ClassroomManager.Models.Student", "student")
                        .WithMany()
                        .HasForeignKey("studentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ClassroomManager.Models.Lesson", b =>
                {
                    b.HasOne("ClassroomManager.Models.Course", "course")
                        .WithMany()
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ClassroomManager.Models.StudentCourse", b =>
                {
                    b.HasOne("ClassroomManager.Models.Course", "course")
                        .WithMany()
                        .HasForeignKey("courseID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ClassroomManager.Models.Student", "student")
                        .WithMany()
                        .HasForeignKey("studentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
